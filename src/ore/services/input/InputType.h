#pragma once

#include <string>

namespace ore {
    namespace input {
        enum class InputType {
            // Keyboard
            KEY_A,
            KEY_B,
            KEY_C,
            KEY_D,
            KEY_E,
            KEY_F,
            KEY_G,
            KEY_H,
            KEY_I,
            KEY_J,
            KEY_K,
            KEY_L,
            KEY_M,
            KEY_N,
            KEY_O,
            KEY_P,
            KEY_Q,
            KEY_R,
            KEY_S,
            KEY_T,
            KEY_U,
            KEY_V,
            KEY_W,
            KEY_X,
            KEY_Y,
            KEY_Z,

            KEY_0,
            KEY_1,
            KEY_2,
            KEY_3,
            KEY_4,
            KEY_5,
            KEY_6,
            KEY_7,
            KEY_8,
            KEY_9,

            KEY_F1,
            KEY_F2,
            KEY_F3,
            KEY_F4,
            KEY_F5,
            KEY_F6,
            KEY_F7,
            KEY_F8,
            KEY_F9,
            KEY_F10,
            KEY_F11,
            KEY_F12,
            KEY_F13,
            KEY_F14,
            KEY_F15,
            KEY_F16,
            KEY_F17,
            KEY_F18,
            KEY_F19,
            KEY_F20,
            KEY_F21,
            KEY_F22,
            KEY_F23,
            KEY_F24,
            KEY_F25,

            KEY_LEFT,
            KEY_RIGHT,
            KEY_UP,
            KEY_DOWN,

            KEY_LEFT_SHIFT,
            KEY_RIGHT_SHIFT,
            KEY_LEFT_CONTROL,
            KEY_RIGHT_CONTROL,
            KEY_LEFT_ALT,
            KEY_RIGHT_ALT,
            KEY_LEFT_SUPER,
            KEY_RIGHT_SUPER,

            KEY_SPACE,
            KEY_APOSTROPHE,
            KEY_COMMA,
            KEY_PERIOD,
            KEY_SLASH,
            KEY_SEMICOLON,
            KEY_EQUAL,
            KEY_LEFT_BRACKET,
            KEY_BACKSLASH,
            KEY_RIGHT_BRACKET,
            KEY_GRAVE_ACCENT,
            KEY_WORLD_1,
            KEY_WORLD_2,
            KEY_ESCAPE,
            KEY_ENTER,
            KEY_TAB,
            KEY_BACKSPACE,
            KEY_INSERT,
            KEY_DELETE,
            KEY_PAGE_UP,
            KEY_PAGE_DOWN,
            KEY_HOME,
            KEY_END,
            KEY_CAPS_LOCK,
            KEY_SCROLL_LOCK,
            KEY_NUM_LOCK,
            KEY_PRINT_SCREEN,
            KEY_PAUSE,
            KEY_MENU,

            KEY_NUMPAD_DECIMAL,
            KEY_NUMPAD_DIVIDE,
            KEY_NUMPAD_MULTIPLY,
            KEY_NUMPAD_SUBTRACT,
            KEY_NUMPAD_ADD,
            KEY_NUMPAD_ENTER,
            KEY_NUMPAD_EQUAL,
            KEY_NUMPAD_0,
            KEY_NUMPAD_1,
            KEY_NUMPAD_2,
            KEY_NUMPAD_3,
            KEY_NUMPAD_4,
            KEY_NUMPAD_5,
            KEY_NUMPAD_6,
            KEY_NUMPAD_7,
            KEY_NUMPAD_8,
            KEY_NUMPAD_9,

            // Mouse
            MOUSE_BUTTON_1,
            MOUSE_BUTTON_2,
            MOUSE_BUTTON_3,
            MOUSE_BUTTON_4,
            MOUSE_BUTTON_5,
            MOUSE_BUTTON_6,
            MOUSE_BUTTON_7,
            MOUSE_BUTTON_8,
            MOUSE_BUTTON_LEFT,
            MOUSE_BUTTON_RIGHT,
            MOUSE_BUTTON_MIDDLE,

            MOUSE_AXIS_SCROLL,
            MOUSE_AXIS_HORIZONTAL,
            MOUSE_AXIS_VERTICAL,

            // Generic controller
            CONTROLLER_BUTTON_1,
            CONTROLLER_BUTTON_2,
            CONTROLLER_BUTTON_3,
            CONTROLLER_BUTTON_4,
            CONTROLLER_BUTTON_5,
            CONTROLLER_BUTTON_6,
            CONTROLLER_BUTTON_7,
            CONTROLLER_BUTTON_8,
            CONTROLLER_BUTTON_9,
            CONTROLLER_BUTTON_10,
            CONTROLLER_BUTTON_11,
            CONTROLLER_BUTTON_12,
            CONTROLLER_BUTTON_13,
            CONTROLLER_BUTTON_14,
            CONTROLLER_BUTTON_15,

            CONTROLLER_AXIS_1,
            CONTROLLER_AXIS_2,
            CONTROLLER_AXIS_3,
            CONTROLLER_AXIS_4,
            CONTROLLER_AXIS_5,
            CONTROLLER_AXIS_6,
            CONTROLLER_AXIS_7,
            CONTROLLER_AXIS_8,
            CONTROLLER_AXIS_9,
            CONTROLLER_AXIS_10,
            CONTROLLER_AXIS_11,
            CONTROLLER_AXIS_12,
            CONTROLLER_AXIS_13,
            CONTROLLER_AXIS_14,
            CONTROLLER_AXIS_15,

            // XBOX ONE controller
            XBOX_ONE_CONTROLLER_BUTTON_A,
            XBOX_ONE_CONTROLLER_BUTTON_B,
            XBOX_ONE_CONTROLLER_BUTTON_X,
            XBOX_ONE_CONTROLLER_BUTTON_Y,
            XBOX_ONE_CONTROLLER_BUTTON_DPAD_UP,
            XBOX_ONE_CONTROLLER_BUTTON_DPAD_DOWN,
            XBOX_ONE_CONTROLLER_BUTTON_DPAD_LEFT,
            XBOX_ONE_CONTROLLER_BUTTON_DPAD_RIGHT,
            XBOX_ONE_CONTROLLER_BUTTON_SELECT,
            XBOX_ONE_CONTROLLER_BUTTON_START,
            XBOX_ONE_CONTROLLER_BUTTON_SHOULDER_LEFT,
            XBOX_ONE_CONTROLLER_BUTTON_SHOULDER_RIGHT,
            XBOX_ONE_CONTROLLER_BUTTON_STICK_LEFT,
            XBOX_ONE_CONTROLLER_BUTTON_STICK_RIGHT,

            XBOX_ONE_CONTROLLER_AXIS_STICK_LEFT_HORIZONTAL,
            XBOX_ONE_CONTROLLER_AXIS_STICK_LEFT_VERTICAL,
            XBOX_ONE_CONTROLLER_AXIS_STICK_RIGHT_HORIZONTAL,
            XBOX_ONE_CONTROLLER_AXIS_STICK_RIGHT_VERTICAL,
            XBOX_ONE_CONTROLLER_AXIS_TRIGGER_LEFT,
            XBOX_ONE_CONTROLLER_AXIS_TRIGGER_RIGHT,
        };

        std::string inputTypeToString(ore::input::InputType type);
        ore::input::InputType parseInputType(std::string &typeString);
    }
}